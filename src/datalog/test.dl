.type IntList = [next: IntList, x: number]
.decl Obj(oid: number, fid: number, cid: number, x1: float, y1: float, x2: float, y2: float)
.decl Rel(rid: number, fid: number, o_sub: number, pid: number, o_obj: number)
.decl g1(fid: number, o: number)
.decl g2(fid: number, o: number)
.decl g1seq(fid1: number, fid2: number, arr_o: IntList)
.decl g2seq(fid1: number, fid2: number, arr_o: IntList)
// Example 1 
// Obj(11, 1, 1, 0, 0, 0, 0).
// Obj(21, 2, 1, 0, 0, 0, 0).
// Obj(31, 3, 1, 0, 0, 0, 0).
// Obj(51, 5, 2, 0, 0, 0, 0).
// Obj(61, 6, 2, 0, 0, 0, 0).

// Example 2
// Obj(11, 1, 1, 0, 0, 0, 0).
// Obj(21, 2, 1, 0, 0, 0, 0).
// Obj(31, 3, 1, 0, 0, 0, 0).
// Obj(41, 4, 2, 0, 0, 0, 0).
// Obj(51, 5, 1, 0, 0, 0, 0).
// Obj(61, 6, 2, 0, 0, 0, 0).

// Example 3
// Obj(11, 1, 1, 0, 0, 0, 0).
// Obj(21, 2, 1, 0, 0, 0, 0).
// Obj(22, 2, 2, 0, 0, 0, 0).
// Obj(31, 3, 1, 0, 0, 0, 0).
// Obj(41, 4, 1, 0, 0, 0, 0).
// Obj(51, 5, 1, 0, 0, 0, 0).
// Obj(52, 5, 2, 0, 0, 0, 0).
// Obj(61, 6, 2, 0, 0, 0, 0).

// Example 4
Obj(11, 1, 1, 0, 0, 0, 0).
Obj(12, 1, 1, 0, 0, 0, 0).
Obj(21, 2, 1, 0, 0, 0, 0).
Obj(22, 2, 2, 0, 0, 0, 0).
Obj(31, 3, 1, 0, 0, 0, 0).
Obj(41, 4, 1, 0, 0, 0, 0).
Obj(51, 5, 1, 0, 0, 0, 0).
Obj(52, 5, 1, 0, 0, 0, 0).
Obj(53, 5, 2, 0, 0, 0, 0).
Obj(61, 6, 2, 0, 0, 0, 0).

g1(fid, o) :- Obj(o, fid, 1, _, _, _, _).
g2(fid, o) :- Obj(o, fid, 2, _, _, _, _).

g1seq(fid, fid, [nil, o]) :- g1(fid, o).
g1seq(fid1, fid3, [arr_o, o]) :- g1seq(fid1, fid2, arr_o), g1(fid3, o), fid3 = fid2 + 1.

g2seq(fid, fid, [nil, o]) :- g2(fid, o).
g2seq(fid1, fid3, [arr_o, o]) :- g2seq(fid1, fid2, arr_o), g2(fid3, o), fid3 = fid2 + 1.

.decl q(fid1: number, fid2: number, fid3: number, fid4: number, arr_o1: IntList, arr_o2: IntList)
q(fid1, fid2, fid3, fid4, arr_o1, arr_o2) :- g1seq(fid1, fid2, arr_o1), g2seq(fid3, fid4, arr_o2), fid2 < fid3.
// q(fid1, fid2, fid3, fid4, arr_o1, arr_o2) :- g1seq(fid1, fid2, arr_o1), g2seq(fid3, fid4, arr_o2), fid2 < fid3, fid2 >= fid1 + 4.
// q(fid1, fid2, fid3, fid4, arr_o1, arr_o2) :- g1seq(fid1, fid2, arr_o1), g2seq(fid3, fid4, arr_o2), fid2 < fid3, fid4 - fid1 < 2.

.decl q_neg(fid1: number, fid2: number, fid3: number, fid4: number)
// q_neg(fid1, fid2, fid3, fid4) :- q(fid1, fid2, fid3, fid4, _, _), q(fid1p, fid2p, fid3p, fid4p, _, _), fid1p < fid1, fid2 <= fid2p, fid3p <= fid3, fid4 <= fid4p.
// q_neg(fid1, fid2, fid3, fid4) :- q(fid1, fid2, fid3, fid4, _, _), q(fid1p, fid2p, fid3p, fid4p, _, _), fid1p <= fid1, fid2 < fid2p, fid3p <= fid3, fid4 <= fid4p.
// q_neg(fid1, fid2, fid3, fid4) :- q(fid1, fid2, fid3, fid4, _, _), q(fid1p, fid2p, fid3p, fid4p, _, _), fid1p <= fid1, fid2 <= fid2p, fid3p < fid3, fid4 <= fid4p.
// q_neg(fid1, fid2, fid3, fid4) :- q(fid1, fid2, fid3, fid4, _, _), q(fid1p, fid2p, fid3p, fid4p, _, _), fid1p <= fid1, fid2 <= fid2p, fid3p <= fid3, fid4 < fid4p.
q_neg(fid1, fid2, fid3, fid4) :- q(fid1, fid2, fid3, fid4, _, _), q(fid1p, fid2p, fid3p, fid4p, _, _), fid1p <= fid1, fid2 <= fid2p, fid3p <= fid3, fid4 <= fid4p, fid2p - fid1p + fid4p - fid3p > fid2 - fid1 + fid4 - fid3.

.decl q_filtered(fid1: number, fid2: number, fid3: number, fid4: number, arr_o1: IntList, arr_o2: IntList)
q_filtered(fid1, fid2, fid3, fid4, arr_o1, arr_o2) :- q(fid1, fid2, fid3, fid4, arr_o1, arr_o2), !q_neg(fid1, fid2, fid3, fid4).

.output q_filtered(IO=stdout)