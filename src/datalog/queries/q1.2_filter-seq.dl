.type IntList = [next: IntList, x: number]
.decl Obj(oid: number, fid: number, cid: number, x1: float, y1: float, x2: float, y2: float)
// .decl Rel(rid: number, fid: number, o_sub: number, pid: number, o_obj: number)
.decl g1(fid: number, x1: float, y1: float, x2: float, y2: float) inline
.decl g2(fid: number, x1: float, y1: float, x2: float, y2: float) inline
.decl g1seq(fid1: number, fid2: number, x1: float, y1: float, x2: float, y2: float)
.decl g2seq(fid1: number, fid2: number, x1: float, y1: float, x2: float, y2: float)

.functor get_iou(x1: float, y1: float, x2: float, y2: float, x1p: float, y1p: float, x2p: float, y2p: float):float
.input Obj(filename="data/facts/obj.facts")

// oid mappings:
// 0: person, 1: bicycle, 2: car
g1(fid, x1, y1, x2, y2) :- Obj(_, fid, 0, x1, y1, x2, y2), x1 < 540, x2 > 367, y1 < 418, y2 > 345.

g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y1 > -0.191 * x1 + 480, y1 > 0.295 * x1 + 261.
g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y2 > -0.191 * x1 + 480, y2 > 0.295 * x1 + 261.
g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y1 > -0.191 * x2 + 480, y1 > 0.295 * x2 + 261.
g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y2 > -0.191 * x2 + 480, y2 > 0.295 * x2 + 261.

g1seq(fid, fid, x1, y1, x2, y2) :- g1(fid, x1, y1, x2, y2).
g1seq(fid1, fid3, x1p, y1p, x2p, y2p) :- g1seq(fid1, fid2, x1, y1, x2, y2), g1(fid3, x1p, y1p, x2p, y2p), fid3 = fid2 + 1.//, @get_iou(x1, y1, x2, y2, x1p, y1p, x2p, y2p) > 0.5. // UDF(); IOU > 0.5.

.decl g1seq_duration(fid1: number, fid2: number)
g1seq_duration(fid1, fid2) :- g1seq(fid1, fid2, _, _, _, _), fid2 - fid1 > 30.

.decl g1seq_a(fid1: number, fid2: number)
g1seq_a(fid1, m) :- g1seq_duration(fid1, _), m = max fid2: {g1seq_duration(fid1, fid2)}.
.decl g1seq_filtered(fid1: number, fid2: number)
g1seq_filtered(m, fid2) :- g1seq_a(_, fid2), m = min fid1: {g1seq_a(fid1, fid2)}.

g2seq(fid, fid, x1, y1, x2, y2) :- g2(fid, x1, y1, x2, y2).
g2seq(fid1, fid3, x1p, y1p, x2p, y2p) :- g2seq(fid1, fid2, x1, y1, x2, y2), g2(fid3, x1p, y1p, x2p, y2p), fid3 = fid2 + 1.//, @get_iou(x1, y1, x2, y2, x1p, y1p, x2p, y2p) > 0.5.

.decl g2seq_duration(fid1: number, fid2: number)
g2seq_duration(fid1, fid2) :- g2seq(fid1, fid2, _, _, _, _), fid2 - fid1 > 30.

.decl g2seq_a(fid1: number, fid2: number)
g2seq_a(fid1, m) :- g2seq_duration(fid1, _), m = max fid2: {g2seq_duration(fid1, fid2)}.
.decl g2seq_filtered(fid1: number, fid2: number)
g2seq_filtered(m, fid2) :- g2seq_a(_, fid2), m = min fid1: {g2seq_a(fid1, fid2)}.

.decl q(fid1: number, fid2: number, fid3: number, fid4: number)
q(fid1, fid2, fid3, fid4) :- g1seq_filtered(fid1, fid2), g2seq_filtered(fid3, fid4), fid1 < fid3, fid3 - fid1 < 100.

.output q(filename="data/answers/q1.2_filter-seq.ans")