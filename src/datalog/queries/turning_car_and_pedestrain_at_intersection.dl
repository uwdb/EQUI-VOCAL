.type IntList = [next: IntList, x: number]
.decl Obj(oid: number, fid: number, cid: number, x1: float, y1: float, x2: float, y2: float)
// .decl Rel(rid: number, fid: number, o_sub: number, pid: number, o_obj: number)
.decl g1(fid: number, x1: float, y1: float, x2: float, y2: float) inline
.decl g2(fid: number, x1: float, y1: float, x2: float, y2: float) inline
.decl g2_turning(fid: number, x1: float, y1: float, x2: float, y2: float) inline
.decl g1seq(fid1: number, fid2: number, x1: float, y1: float, x2: float, y2: float)
.decl g2seq(fid1: number, fid2: number, x1: float, y1: float, x2: float, y2: float)

.functor get_iou(x1: float, y1: float, x2: float, y2: float, x1p: float, y1p: float, x2p: float, y2p: float):float
.input Obj(filename="data/facts/obj.facts")

// oid mappings:
// 0: person, 1: bicycle, 2: car
g1(fid, x1, y1, x2, y2) :- Obj(_, fid, 0, x1, y1, x2, y2), x1 < 540, x2 > 367, y1 < 418, y2 > 345.

g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y1 > -0.191 * x1 + 480, y1 > 0.295 * x1 + 261.
g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y2 > -0.191 * x1 + 480, y2 > 0.295 * x1 + 261.
g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y1 > -0.191 * x2 + 480, y1 > 0.295 * x2 + 261.
g2(fid, x1, y1, x2, y2) :- Obj(_, fid, 2, x1, y1, x2, y2), y2 > -0.191 * x2 + 480, y2 > 0.295 * x2 + 261.

g2_turning(fid, x1, y1, x2, y2) :- g2(fid, x1, y1, x2, y2), x1 + x2 <= 1237.18, y1 + y2 > 805.22, x2 - x1 > 107.06, y1 + y2 <= 956.3.
g2_turning(fid, x1, y1, x2, y2) :- g2(fid, x1, y1, x2, y2), y1 + y2 > 956.3, x1 + x2 <= 1275.06, y2 - y1 <= 69.13, y1 + y2 <=1011.96.
g2_turning(fid, x1, y1, x2, y2) :- g2(fid, x1, y1, x2, y2), y1 + y2 > 956.3, x1 + x2 > 1275.06.
// g2_turning(fid, x1, y1, x2, y2) :- g2(fid, x1, y1, x2, y2), x1 + x2 <= 1215.26, (x2 - x1) > 1.4 * (y2 - y1), x2 - x1 > 193.02, y1 + y2 <= 991.86.
// g2_turning(fid, x1, y1, x2, y2) :- g2(fid, x1, y1, x2, y2), x1 + x2 <= 1215.26, (x2 - x1) > 1.4 * (y2 - y1), x2 - x1 <= 193.02, y1 + y2 <= 991.86, x1 + x2 > 813.64.

g1seq(fid, fid, x1, y1, x2, y2) :- g1(fid, x1, y1, x2, y2).
g1seq(fid1, fid3, x1p, y1p, x2p, y2p) :- g1seq(fid1, fid2, x1, y1, x2, y2), g1(fid3, x1p, y1p, x2p, y2p), fid3 = fid2 + 1, @get_iou(x1, y1, x2, y2, x1p, y1p, x2p, y2p) > 0.5. // UDF(); IOU > 0.5.

.decl g1seq_a(fid1: number, fid2: number)
g1seq_a(fid1, m) :- g1seq(fid1, _, _, _, _, _), m = max fid2: {g1seq(fid1, fid2, _, _, _, _)}.
.decl g1seq_filtered(fid1: number, fid2: number)
g1seq_filtered(m, fid2) :- g1seq_a(_, fid2), m = min fid1: {g1seq_a(fid1, fid2)}.

g2seq(fid, fid, x1, y1, x2, y2) :- g2_turning(fid, x1, y1, x2, y2).
g2seq(fid1, fid3, x1p, y1p, x2p, y2p) :- g2seq(fid1, fid2, x1, y1, x2, y2), g2_turning(fid3, x1p, y1p, x2p, y2p), fid3 = fid2 + 1, @get_iou(x1, y1, x2, y2, x1p, y1p, x2p, y2p) > 0.5.

.decl g2seq_a(fid1: number, fid2: number)
g2seq_a(fid1, m) :- g2seq(fid1, _, _, _, _, _), m = max fid2: {g2seq(fid1, fid2, _, _, _, _)}.
.decl g2seq_filtered(fid1: number, fid2: number)
g2seq_filtered(m, fid2) :- g2seq_a(_, fid2), m = min fid1: {g2seq_a(fid1, fid2)}.

.decl q(fid1: number, fid2: number, fid3: number, fid4: number)
// g1seq and g2seq overlaps
q(fid1, fid2, fid3, fid4) :- g1seq_filtered(fid1, fid2), g2seq_filtered(fid3, fid4), fid2 > fid3, fid4 > fid1.

.output q(filename="data/answers/turning_car_and_pedestrain_at_intersection_test.ans")